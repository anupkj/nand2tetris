// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //// Replace this comment with your code.

    And(a=instruction[15] ,b=instruction[5] ,out=d1 );
    And(a=instruction[15] ,b=instruction[4] ,out=d2 );
    And(a=instruction[15] ,b=instruction[3] ,out=d3 , out=writeM);
    And(a=instruction[15] ,b=instruction[2] ,out=j1 );
    And(a=instruction[15] ,b=instruction[1] ,out=j2 );
    And(a=instruction[15] ,b=instruction[0] ,out=j3 );

    // address register
    Not(in=instruction[15], out=instructionMsbNot);
    Mux16(a=aluOutput, b=instruction, sel=instructionMsbNot, out=addressRegInput);
    Or(a=d1, b=instructionMsbNot, out=loadA);
    ARegister(in=addressRegInput, load=loadA, out=addressRegOutput, out[0..14] = addressM);

    // Data register
    DRegister(in=aluOutput, load=d2, out=dataRegOutput);

    // ALU
    Mux16(a=addressRegOutput, b=inM, sel=instruction[12], out=aluInput2);
    ALU(x=dataRegOutput, y=aluInput2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, zr=zr, ng=ng, out = aluOutput);

    // program counter
    Or(a=zr, b=ng, out=zrng);
    Not(in=zrng, out=ps);

    And(a=j3, b=ps, out=jgt);
    And(a=j2, b=zr, out=jeq);
    And(a=j1, b=ng, out = jlt);

    Or(a=jgt, b=jeq, out=temp);
    Or(a=temp, b=jlt, out=jumpa);

    Not(in=jumpa, out=incra);

    PC(in=addressRegOutput, load=jumpa, inc=incra, reset=reset, out[0..14]=pc, out[15]=false);
}
